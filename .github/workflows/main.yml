name: Deployment on AWS
on:
  push:
    branches:
      - stage
      - main
      - production
    
jobs:
  get-environment:
    name: Get environment
    outputs:
      my_env: ${{ steps.setenv.outputs.my_env }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout github code
      id: checkout-id
      uses: actions/checkout@v4
    - id: setenv
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
          echo "my_env=stage" >> $GITHUB_OUTPUT          
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "my_env=main" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
          echo "my_env=production" >> $GITHUB_OUTPUT
        fi


  # AI Chat
  # =======================================================
  ai-chat:
    if: contains(github.event.head_commit.message, 'deploy chat')
    name: Deploying AI Chat
    runs-on: ubuntu-latest
    needs: get-environment
    environment: 
      name: ${{ needs.get-environment.outputs.my_env }}
    permissions:
      contents: write
    steps:
      - name: Checkout github code
        id: checkout-id
        uses: actions/checkout@v4
      - name: Test Variables
        run: |
          echo "${{ vars.ENVIRONMENT }}"
          echo "${{ vars.AWS_DEFAULT_REGION }}"
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Get branch name
        id: branch
        shell: bash
        run: echo "name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - name: Echo branch name
        run: |
          echo ${{ steps.branch.outputs.name }}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Pushing image
        id: build-image-chat
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ENVIRONMENT }}_ai_chat_luminous
          IMAGE_TAG: ${{ vars.ENVIRONMENT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          PORT_AI_CHAT: ${{ vars.PORT_AI_CHAT }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
        run: |
          docker build --build-arg ENVIRONMENT=${ENVIRONMENT} --build-arg PORT_AI_CHAT=${PORT_AI_CHAT} -f docker/aws/chat/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image-chat=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: "Configure AWS Credentials" 
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# # Working code start #
      # - name : Create Code Deploy
      #   env:
      #     ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      #     PORT_AI_CHAT: ${{ vars.PORT_AI_CHAT }}
      #   id: deploy
      #   uses: webfactory/create-aws-codedeploy-deployment@v0.2.2
      #   with:
      #         application: demo
#       - name : Print Commit Message
#         uses: peter-evans/commit-comment@v2
#         with:
#           application: demo
#           token: ${{ secrets.CODEDEPLOY_TOKEN }}
#           body: |
#             @${{ github.actor }} this was deployed as [${{ steps.deploy.outputs.deploymentId }}](https://console.aws.amazon.com/codesuite/codedeploy/deployments/${{ steps.deploy.outputs.deploymentId }}?region=us-east-1) to group `${{ steps.deploy.outputs.deploymentGroupName }}`.
# Working code End #

      - name: Deploy with CodeDeploy
        env:
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          PORT_AI_CHAT: ${{ vars.PORT_AI_CHAT }}
        run: |
          aws deploy create-deployment \
            --application-name demo \
            --deployment-group-name demo \
            --s3-location bucket=demo-bucket-codedeploy,key=deploy.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE
          
    # # Step 4: Create AppSpec File for CodeDeploy
    #   - name: Create AppSpec File
    #     env:
    #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #       ECR_REPOSITORY: ${{ vars.ENVIRONMENT }}_ai_chat_luminous
    #       IMAGE_TAG: ${{ vars.ENVIRONMENT }}
    #     run: |
    #       echo "
    #         version: 0.0
    #         Resources:
    #         - my-container:
    #           Type: AWS::ECS::Service
    #           Properties:
    #             TaskDefinition: ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
    #             ContainerName: my-app" > appspec.yml

  # deploy-codedeploy:
  #   name: Deploy with CodeDeploy
  #   runs-on: ubuntu-latest
  #   needs: ai-chat

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Deploy to EC2
  #       uses: aws-actions/aws-codedeploy@v1
  #       with:
  #         application-name: demo
  #         deployment-group-name: demo
  #         bundle-type: zip
  #         deployment-zip: ./deploy.zip
  #       env:
  #         AWS_REGION: ${{ vars.AWS_DEFAULT_REGION }}
